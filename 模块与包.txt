比如有下面这样的文件结构，它的存放路径是/home/shiyanlou，注意，
是该目录下还有一个 shiyanlou 目录，以下目录结构需要自己手动创建：

shiyanlou
├─ __init__.py
├─ louplus.py
├─ courses.py
└─ users
    ├─ __init__.py
    └─ totalnums.py

因为shiyanlou目录下有__init__.py文件，所以它可以被 Python 识别为一个包
（从 Python3.3 开始，就不再需要目录下必须有 __init__.py 文件了）。

如果想要在/home/shiyanlou/Code目录下引入 courses 模块就可以用
import shiyanlou.courses 这种代码来引入，
前提是 shiyanlou 目录已经放到了 Python 模块搜索的默认路径下了，
可以通过sys.path.append(yourModulePath)。


在 Python 包内部可以使用相对路径的方式来简化相对层级中包内模块的相互引用。比如在 shiyanlou 包的内部，
如果想要在 louplus.py 文件中引入 courses 模块，可以使用 import courses 或是 from . import courses。
如果想要单独运行 louplus.py 文件查看效果就需要在 /home/shiyanlou 目录下执行 python3 -m shiyanlou.louplus。

Python 的 -m 参数用于将一个模块或包当作一个脚本运行。

而如果想要在 totalnums.py 文件中引入 courses.py 文件中的 java 函数 ，可以使用 from ..courses import java。

#-------------------------------------------------------------------------------------------------------------------
#引用文章链接https://codingpy.com/article/python-import-101/
python导入模块的几种方法
原文：Python 101 - All about imports

作为一名新手Python程序员，你首先需要学习的内容之一就是如何导入模块或包。
但是我注意到，那些许多年来不时使用Python的人并不是都知道Python的导入机制其实非常灵活。
在本文中，我们将探讨以下话题：

    常规导入（regular imports）
    使用from语句导入
    相对导入（relative imports）
    可选导入（optional imports）
    本地导入（local imports）
    导入注意事项

常规导入

常规导入应该是最常使用的导入方式，大概是这样的：

import sys

你只需要使用import一词，然后指定你希望导入的模块或包即可。通过这种方式导入的好处是可以一次性导入多个包或模块：

import os, sys, time

虽然这节省了空间，但是却违背了Python风格指南。Python风格指南建议将每个导入语句单独成行。

有时在导入模块时，你想要重命名这个模块。这个功能很容易实现：

import sys as system

print(system.platform)

上面的代码将我们导入的sys模块重命名为system。我们可以按照和以前一样的方式调用模块的方法，
但是可以用一个新的模块名。也有某些子模块必须要使用点标记法才能导入。

import urllib.error

这个情况不常见，但是对此有所了解总是没有坏处的。
使用from语句导入

很多时候你只想要导入一个模块或库中的某个部分。我们来看看在Python中如何实现这点：

from functools import lru_cache

上面这行代码可以让你直接调用lru_cache。如果你按常规方式导入functools，那么你就必须像这样调用lru_cache：

functools.lru_cache(*args)

根据你实际的使用场景，上面的做法可能是更好的。在复杂的代码库中，能够看出某个函数是从哪里导入的这点很有用的。
不过，如果你的代码维护的很好，模块化程度高，那么只从某个模块中导入一部分内容也是非常方便和简洁的。

当然，你还可以使用from方法导入模块的全部内容，就像这样：

from os import *

这种做法在少数情况下是挺方便的，但是这样也会打乱你的命名空间。问题在于，
你可能定义了一个与导入模块中名称相同的变量或函数，
这时如果你试图使用os模块中的同名变量或函数，实际使用的将是你自己定义的内容。
因此，你最后可能会碰到一个相当让人困惑的逻辑错误。标准库中我唯一推荐全盘导入的模块只有Tkinter。

如果你正好要写自己的模块或包，有人会建议你在__init__.py文件中导入所有内容，
让模块或者包使用起来更方便。我个人更喜欢显示地导入，而非隐式地导入。

你也可以采取折中方案，从一个包中导入多个项：

from os import path, walk, unlink
from os import uname, remove

在上述代码中，我们从os模块中导入了5个函数。你可能注意到了，
我们是通过多次从同一个模块中导入实现的。当然，如果你愿意的话，
你也可以使用圆括号一次性导入多个项：

from os import (path, walk, unlink, uname, 
                remove, rename)

这是一个有用的技巧，不过你也可以换一种方式：

from os import path, walk, unlink, uname, \
                remove, rename

上面的反斜杠是Python中的续行符，告诉解释器这行代码延续至下一行。
相对导入

PEP 328介绍了引入相对导入的原因，以及选择了哪种语法。具体来说，
是使用句点来决定如何相对导入其他包或模块。这么做的原因是为了避免偶然情况下导入标准库中的模块产生冲突。
这里我们以PEP 328中给出的文件夹结构为例，看看相对导入是如何工作的：

my_package/
    __init__.py
    subpackage1/
        __init__.py
        module_x.py
        module_y.py
    subpackage2/
        __init__.py
        module_z.py
    module_a.py

在本地磁盘上找个地方创建上述文件和文件夹。在顶层的__init__.py文件中，输入以下代码：

from . import subpackage1
from . import subpackage2

接下来进入subpackage1文件夹，编辑其中的__init__.py文件，输入以下代码：

from . import module_x
from . import module_y

现在编辑module_x.py文件，输入以下代码：

from .module_y import spam as ham

def main():
    ham()

最后编辑module_y.py文件，输入以下代码：

def spam():
    print('spam ' * 3)

打开终端，cd至my_package包所在的文件夹，但不要进入my_package。在这个文件夹下运行Python解释器。
我使用的是IPython，因为它的自动补全功能非常方便：

In [1]: import my_package

In [2]: my_package.subpackage1.module_x
Out[2]: <module 'my_package.subpackage1.module_x' from 'my_package/subpackage1/module_x.py'>

In [3]: my_package.subpackage1.module_x.main()
spam spam spam


相对导入适用于你最终要放入包中的代码。如果你编写了很多相关性强的代码，那么应该采用这种导入方式。
你会发现PyPI上有很多流行的包也是采用了相对导入。还要注意一点，如果你想要跨越多个文件层级进行导入，
只需要使用多个句点即可。不过，PEP 328建议相对导入的层级不要超过两层。

还要注意一点，如果你往module_x.py文件中添加了if __name__ == ‘__main__’，然后试图运行这个文件，
你会碰到一个很难理解的错误。编辑一下文件，试试看吧！

from . module_y import spam as ham

def main():
    ham()

if __name__ == '__main__':
    # This won't work!
    main()

现在从终端进入subpackage1文件夹，执行以下命令：

python module_x.py

如果你使用的是Python 2，你应该会看到下面的错误信息：

Traceback (most recent call last):
  File "module_x.py", line 1, in <module>
    from . module_y import spam as ham
ValueError: Attempted relative import in non-package

如果你使用的是Python 3，错误信息大概是这样的：

Traceback (most recent call last):
  File "module_x.py", line 1, in <module>
    from . module_y import spam as ham
SystemError: Parent module '' not loaded, cannot perform relative import

这指的是，module_x.py是某个包中的一个模块，而你试图以脚本模式执行，但是这种模式不支持相对导入。

如果你想在自己的代码中使用这个模块，那么你必须将其添加至Python的导入检索路径（import search path）。
最简单的做法如下：

import sys
sys.path.append('/path/to/folder/containing/my_package')
import my_package

注意，你需要添加的是my_package的上一层文件夹路径，而不是my_package本身。
原因是my_package就是我们想要使用的包，所以如果你添加它的路径，那么将无法使用这个包。

我们接下来谈谈可选导入。
可选导入（Optional imports）

如果你希望优先使用某个模块或包，但是同时也想在没有这个模块或包的情况下有备选，
你就可以使用可选导入这种方式。这样做可以导入支持某个软件的多种版本或者实现性能提升。以github2包中的代码为例：

try:
    # For Python 3
    from http.client import responses
except ImportError:  # For Python 2.5-2.7
    try:
        from httplib import responses  # NOQA
    except ImportError:  # For Python 2.4
        from BaseHTTPServer import BaseHTTPRequestHandler as _BHRH
        responses = dict([(k, v[0]) for k, v in _BHRH.responses.items()])

lxml包也有使用可选导入方式：

try:
    from urlparse import urljoin
    from urllib2 import urlopen
except ImportError:
    # Python 3
    from urllib.parse import urljoin
    from urllib.request import urlopen

正如以上示例所示，可选导入的使用很常见，是一个值得掌握的技巧。
局部导入

当你在局部作用域中导入模块时，你执行的就是局部导入。如果你在Python脚本文件的顶部导入一个模块，
那么你就是在将该模块导入至全局作用域，这意味着之后的任何函数或方法都可能访问该模块。例如：

import sys  # global scope

def square_root(a):
    # This import is into the square_root functions local scope
    import math
    return math.sqrt(a)

def my_pow(base_num, power):
    return math.pow(base_num, power)

if __name__ == '__main__':
    print(square_root(49))
    print(my_pow(2, 3))

这里，我们将sys模块导入至全局作用域，但我们并没有使用这个模块。然后，在square_root函数中，
我们将math模块导入至该函数的局部作用域，这意味着math模块只能在square_root函数内部使用。
如果我们试图在my_pow函数中使用math，会引发NameError。试着执行这个脚本，看看会发生什么。

使用局部作用域的好处之一，是你使用的模块可能需要很长时间才能导入，如果是这样的话，
将其放在某个不经常调用的函数中或许更加合理，而不是直接在全局作用域中导入。
老实说，我几乎从没有使用过局部导入，主要是因为如果模块内部到处都有导入语句，会很难分辨出这样做的原因和用途。
根据约定，所有的导入语句都应该位于模块的顶部。
导入注意事项

在导入模块方面，有几个程序员常犯的错误。这里我们介绍两个。

    循环导入（circular imports）
    覆盖导入（Shadowed imports，暂时翻译为覆盖导入）

先来看看循环导入。
循环导入

如果你创建两个模块，二者相互导入对方，那么就会出现循环导入。例如：

# a.py
import b

def a_test():
    print("in a_test")
    b.b_test()

a_test()

然后在同个文件夹中创建另一个模块，将其命名为b.py。

import a

def b_test():
    print('In test_b"')
    a.a_test()

b_test()

如果你运行任意一个模块，都会引发AttributeError。这是因为这两个模块都在试图导入对方。
简单来说，模块a想要导入模块b，但是因为模块b也在试图导入模块a（这时正在执行），模块a将无法完成模块b的导入。
我看过一些解决这个问题的破解方法（hack），但是一般来说，你应该做的是重构代码，避免发生这种情况。
覆盖导入

当你创建的模块与标准库中的模块同名时，如果你导入这个模块，就会出现覆盖导入。举个例子，
创建一个名叫math.py的文件，在其中写入如下代码：

import math

def square_root(number):
    return math.sqrt(number)

square_root(72)

现在打开终端，试着运行这个文件，你会得到以下回溯信息（traceback）：

Traceback (most recent call last):
  File "math.py", line 1, in <module>
    import math
  File "/Users/michael/Desktop/math.py", line 6, in <module>
    square_root(72)
  File "/Users/michael/Desktop/math.py", line 4, in square_root
    return math.sqrt(number)
AttributeError: module 'math' has no attribute 'sqrt'

这到底是怎么回事？其实，你运行这个文件的时候，Python解释器首先在当前运行脚本所处的的文件夹中查找名叫math的模块。
在这个例子中，解释器找到了我们正在执行的模块，试图导入它。但是我们的模块中并没有叫sqrt的函数或属性，
所以就抛出了AttributeError。
总结

在本文中，我们讲了很多有关导入的内容，但是还有部分内容没有涉及。PEP 302中介绍了导入钩子（import hooks），
支持实现一些非常酷的功能，比如说直接从github导入。Python标准库中还有一个importlib模块，值得查看学习。
当然，你还可以多看看别人写的代码，不断挖掘更多好用的妙招。


#------------------------------------------------------------------------------------------------
#引用文章链接https://liam.page/2017/07/23/modules-and-packages-of-python/

如果你用过 Python，那么你一定用过 import 关键字加载过各式各样的模块。但你是否熟悉 Python 中的模块与包的概念呢？或者，以下几个问题，你是否有明确的答案？

    什么是模块？什么又是包？
    from matplotlib.ticker import Formatter, FixedLocator 中的 matplotlib 和 ticker 分别是什么？中间的句点是什么意思？
    from matplotlib.pyplot import * 中，import * 的背后会发生什么？

鲁迅先生说：「于无声处听惊雷」，讲的是平淡时却有令人惊奇、意外的事情。import 相关的模块、包的概念也是如此。如果你对上面几个问题存有疑问，那么这篇就是为你而作的。
模块
为什么要有模块

众所周知，Python 有一个交互式的解释器。在解释器中，你可以使用 Python 的所有功能。但是，解释器是一次性的。也就是说，如果你关掉解释器，
那么先前定义、运行的一切东西，都会丢失不见。另一方面，在解释器中输入代码是一件很麻烦的事情；这是因为在解释器中复用代码比较困难。

为此，人们会把相对稳定、篇幅较长的代码保存在一个纯文本文件中。一般来说，我们把这样扩展名为 .py 的文件称为 Python 脚本。为了提高代码复用率，
我们可以把一组相关的 Python 相关的定义、声明保存在同一个 .py 文件中。此时，这个 Python 脚本就是一个 Python 模块（Module）。我们可以在解释器中，
或者在其他 Python 脚本中，通过 import 载入定义好的 Python 模块。
模块的识别

和 Python 中的其它对象一样，Python 也为模块定义了一些形如 __foo__ 的变量。对于模块来说，最重要的就是它的名字 __name__ 了。每当 Python 执行脚本，
它就会为该脚本赋予一个名字。对于「主程序」来说，这一脚本的 __name__ 被定义为 "__main__"；对于被 import 进主程序的模块来说，
这一脚本的 __name__ 被定义为脚本的文件名（base filename）。因此，我们可以用 if __name__ == "__main__": 在模块代码中定义一些测试代码。
fibonacci.py

def fib_yield(n):
    a, b = 0, 1
    while b < n:
        yield b
        a, b = b, a+b

def fib(n):
    for num in fib_yield(n):
        print(num)

if __name__ == "__main__":
    fib(10)

复制

我们将其保存为 fibonacci.py，而后在 Python 解释器中 import 它。

In [1]: import fibonacci

In [2]: dir(fibonacci)
Out[2]:
['__builtins__',
 '__doc__',
 '__file__',
 '__name__',
 '__package__',
 'fib',
 'fib_yield']

In [3]: print(fibonacci.__name__)
fibonacci

In [4]: fibonacci.fib(5)
1
1
2
3

In [5]: for num in fibonacci.fib_yield(5):
   ...:     print(num)
   ...:
1
1
2
3

复制

可以观察到，fibonacci.py 在作为模块引入时，fibonacci.__name__ 被设置为文件名 "fibonacci"。但若在命令行直接执行 python fibonacci.py，
则 if 语句块会被执行，此时 __name__ 是 "__main__"。
模块的内部变量和初始化

Python 为每个模块维护了单独的符号表，因此可以实现类似 C++ 中名字空间（namespace）的功能。Python 模块中的函数，可以使用模块的内部变量，
完成相关的初始化操作；同时，import 模块的时候，也不用担心这些模块内部变量与用户自定义的变量同名冲突。
module_var.py

foo = 0

def show():
    print(foo)

if __name__ == "__main__":
    show()

复制

此处我们在模块 module_var 内部定义了内部变量 foo，并且在函数 show 中引用了它。

In [7]: import module_var
   ...:
   ...: foo = 3
   ...:
   ...: print(foo)
   ...: print(module_var.foo)
   ...:
   ...: module_var.show()
   ...:
3
0
0

复制

值得一提的是，模块的初始化操作（这里指 foo = 0 这条语句），仅只在 Python 解释器第一次处理该模块的时候执行。也就是说，
如果同一个模块被多次 import，它只会执行一次初始化。
from ... import ...

模块提供了类似名字空间的限制，不过 Python 也允许从模块中导入指定的符号（变量、函数、类等）到当前模块。导入后，
这些符号就可以直接使用，而不需要前缀模块名。

In [8]: from fibonacci import fib_yield, fib

In [9]: fib(10)
1
1
2
3
5
8

复制

值得一提的是，被导入的符号，如果引用了模块内部的变量，那么在导入之后也依然会使用模块内的变量，而不是当前环境中的同名变量。

In [11]: from module_var import show

In [12]: foo = 3

In [13]: show()
0

复制

也有更粗暴的方式，导入模块内的所有公开符号（没有前缀 _ 的那些）。不过，一般来说，除了实验、排查，不建议这样做。
因为，通常你不知道模块定义了哪些符号、是否与当前环境有重名的符号。一旦有重名，那么，这样粗暴地导入模块内所有符号，就会覆盖掉当前环境的版本。从而造成难以排查的错误。
模块搜索路径

之前我们都在讨论模块的好处，但是忽略了一个问题：Python 怎样知道从何处找到模块文件？

如果你熟悉命令行，那么这个问题对你来说就不难理解。在命令行中执行的任何命令，实际上背后都对应了一个可执行文件。
命令行解释器（比如 cmd, bash）会从一个全局的环境变量 PATH 中读取一个有序的列表。这个列表包含了一系列的路径，而命令行解释器，会依次在这些路径里，搜索需要的可执行文件。

Python 搜寻模块文件，也遵循了类似的思路。比如，用户在 Python 中尝试导入 import foobar，那么

    首先，Python 会在内建模块中搜寻 foobar；
    若未找到，则 Python 会在当前工作路径（当前脚本所在路径，或者执行 Python 解释器的路径）中搜寻 foobar；
    若仍未找到，则 Python 会在环境变量 PYTHONPATH 中指示的路径中搜寻 foobar；
    若依旧未能找到，则 Python 会在安装时指定的路径中搜寻 foobar；
    若仍旧失败，则 Python 会报错，提示找不到 foobar 这个模块。

In [14]: import foobar
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-14-909badd622c0> in <module>()
----> 1 import foobar

ImportError: No module named foobar

复制
pyc 文件

和 LaTeX 中遇到的问题一样：装载大量文本文件是很慢的。因此 Python 也采用了类似 LaTeX 的解决方案：将模块编译成容易装载的文件，
并保存起来（相当于 LaTeX 中的 dump 格式文件 .fmt）。这些编译好并保存起来的文件，有后缀名 .pyc。

当 Python 编译好模块之后，下次载入时，Python 就会读取相应的 .pyc 文件，而不是 .py 文件。而装载 .pyc 文件会比装载 .py 文件更快。

值得一提的是，对于 .pyc，很多人一直有误解。事实上，从运行的角度，装载 .pyc 并不比装载 .py 文件更快。此处的加速，
仅只在装载模块的过程中起作用。因此 .pyc 中的 C 更多地可以理解为 cache。
包

包（package）是 Python 中对模块的更高一级的抽象。简单来说，Python 允许用户把目录当成模块看待。这样一来，目录中的不同模块文件，
就变成了「包」里面的子模块。此外，包目录下还可以有子目录，这些子目录也可以是 Python 包。这种分层，对模块识别、管理，都是非常有好处的。
特别地，对于一些大型 Python 工具包，内里可能有成百上千个不同功能的模块。若是逐个模块发布，那简直成了灾难。

科学计算领域，SciPy, NumPy, Matplotlib 等第三方工具，都是用包的形式发布的。
目录结构

Python 要求每一个「包」目录下，都必须有一个名为 __init__.py 的文件。从这个文件的名字上看，首先它有 __ 作为前后缀，
我们就知道，这个文件肯定是 Python 内部用来做某种识别用的；其次，它有 init，我们知道它一定和初始化有关；最后，它有 .py 作为后缀名，
因此它也是一个 Python 模块，可以完成一些特定的工作。

现在假设你想编写一个 Python 工具包，用来处理图片，它可能由多个 Python 模块组成。于是你会考虑把它做成一个 Python 包，
内部按照功能分成若干子包，再继续往下分成不同模块去实现。比如会有这样的目录结构。

picture/                        Top-level package
      __init__.py               Initialize the picture package
      formats/                  Subpackage for file format conversions
              __init__.py
              jpgread.py
              jpgwrite.py
              pngread.py
              pngwrite.py
              bmpread.py
              bmpwrite.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              boxblur.py
              gaussblur.py
              sharpen.py
              ...

复制

此处 picture 目录下有 __init__.py，因此 Python 会将其作为一个 Python 包；类似地，子目录 formats 和 filters 就成了 picture 下的子包。
这里，子包的划分以功能为准。formats 下的模块，设计用于处理不同格式的图片文件的读写；而 filters 下的模块，则被设计用于实现各种滤镜效果。
使用 Python 包

Python 包的使用和模块的使用类似，是很自然的方式。以我们的 picture 包为例，若你想使用其中具体的模块，可以这样做。

import picutre.filters.gaussblur

复制

如此，你就导入了 picture 包中 filters 子包中的 gaussblur 模块，你就能使用高斯模糊模块提供的功能了。具体使用方式，和使用模块也保持一致。

picture.filters.gaussblur.gaussblur_filter(input, output)

复制

这看起来很繁琐，因此你可能会喜欢用 from ... import ... 语句，脱去过多的名字限制。

from picture.filters import gaussblur

复制

这样一来，你就可以直接按如下方式使用高斯模糊这一滤镜了。

gaussblur.gaussblur_filter(input, output)

复制
__init__.py

之前简单地介绍了 __init__.py 这个特殊的文件，但未展开。这里我们展开详说。

首先的问题是，为什么要设计 __init__.py，而不是自动地把任何一个目录都当成是 Python 包？这主要是为了防止重名造成的问题。
比如，很可能用户在目录下新建了一个子目录，名为 collections；但 Python 有内建的同名模块。若不加任何限制地，将子目录当做是 Python 包，
那么，import collections 就会引入这个 Python 包。而这样的行为，可能不是用户预期的。从这个意义上说，设计 __init__.py 是一种保护措施。

接下来的问题是，__init__.py 具体还有什么用？

首先来说，__init__.py 可以执行一些初始化的操作。这是因为，__init__.py 作为模块文件，会在相应的 Python 包被引入时首先引入。
这就是说，import picture 相当于是 import picture.__init__。因此，__init__.py 中可以保留一些初始化的代码——比如引入依赖的其他 Python 模块。

其次，细心的你可能发现，上一小节中，我们没有介绍对 Python 包的 from picture import * 的用法。这是因为，从一个包中导入所有内容，
这一行为是不明确的；必须要由包的作者指定。我们可以在 __init__.py 中定义名为 __all__ 的 Python 列表。这样一来，就能使用 from picture import * 了。

具体来说，我们可以在 picture/__init__.py 中做如下定义。
__init__.py

import collections          # import the built-in package

__all__ = ["formats", "filters"]

复制

此时，若我们在用户模块中 from picture import *，则首先会引入 Python 内建的 collections 模块，
而后引入 picture.formats 和 picture.filters 这两个 Python 子包了。
在包内使用相对层级引用其他模块

细心的你应该已经发现，在引入 Python 包中的模块时，我们用句点 . 代替了斜线（或者反斜线）来标记路径的层级（实际上是包和模块的层级）。
在 Python 包的内部，我们也可以使用类似相对路径的方式，使用相对层级来简化包内模块的互相引用。

比如，在 gaussblur.py 中，你可以通过以下四种方式，引入 boxblur.py，而它们的效果是一样的。
gaussblur.py

import boxblur
from . import boxblur
from ..filters import boxblur
from .. import filters.boxblur as boxblur
