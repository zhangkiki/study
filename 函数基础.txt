官方参考文档
https://docs.python.org/3/library/functions.html

我们使用关键字 def 来定义一个函数，定义函数后需要在函数名的括号中写上参数，
最后加:，再换行输入函数内部的代码，注意函数内部代码的缩进：

def functionname(params):
    statement1
    statement2
我们写一个函数接受一个字符串和一个字母作为参数，并将字符串中出现的该字母的数量作为返回值，
回忆下先前的知识，我们提到过字符串是一个特殊的列表，列表中可以使用 count() 函数返回指定元素的数量。

>>> def char_count(str_, char):
...     return str_.count(char)

第二行的 return 关键字，我们把 str_ 中包含 char 的次数返回给调用者。

关于函数的返回值
>>> def char_count(str_, char):
...     return str_.count(char)

如上面的代码所示，Python 函数由 return 语句来定义函数的返回值。 
每个函数都必须有返回值，如果不写 return 语句，则默认返回值为 None。
或者在函数末行写 return
这样，return 后不写任何代码，则返回值也是 None。

如何使用函数呢，我们必须像下面这样调用这个函数：
>>> char_count('shiyanlou.com', 'o')  # 运行函数，返回值为 2
2
>>> result = char_count('shiyanlou.com', 's')  # 运行函数，返回值为 1 并赋值给变量 result
>>> result
1

中，result 变量用来保存函数的返回值，传入的两个参数分别是用来检测的字符串和字母。

现在我们希望改变这个 char_count() 函数，接受一个参数，并将所有的字母及出现的频次打印出来，
这个程序我们实现在一个 Python 脚本文件中。


首先使用 sublime 或 vim 等编辑器创建文件，在 Xfce 终端中输入下面的命令：

$ cd /home/shiyanlou
$ vim count_str.py

依此输入下面的代码：

#!/usr/bin/env python3

def char_count(str_):
    char_list = set(str_)
    for char in char_list:
        print(char, str_.count(char))

if __name__ == '__main__':

    s = input("Enter a string: ")

    char_count(s)

输入后保存并执行程序，程序会要求你输入一个字符串，
并将打印出当前字符串中所有字符出现的频次。

$ python3 count_str.py
Enter a string: shiyanlou.com
a 1
i 1
c 1
y 1
h 1
l 1
o 2
. 1
u 1
s 1
n 1
m 1

现在我们详细说下这个程序：

    第一行的内容是说明需要使用 Python 3 的解释器执行当前的脚本
    函数 char_count 没有返回值，就是没有 return 关键字，这是允许的，
	返回值和参数对于函数都是可选的
    char_count 中首先使用集合获得字符串中所有不重复的字符集
    然后再使用 for 对集合进行遍历，每个字符都使用上一个例子中用到的 str.count() 计算频次
    最后函数中使用 print 打印字符和对应的频次
    if __name__ == '__main__': 这一句相当于 C 语言的 main 函数，作为程序执行的入口，
	实际的作用是让这个程序 python3 count_str.py 这样执行时可以执行到 if __name__ == '__main__': 
	这个代码块中的内容，当通过 import count_str 作为模块导入到其他代码文件时不会
	执行if __name__ == '__main__':中的内容。
