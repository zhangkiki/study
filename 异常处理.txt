Python 常用的异常类有很多，我们不需要去记住，只需要在收到异常的时候能通过查询文档了解含义。
这里介绍几个最常见的异常类：

    NameError 访问一个未定义的变量
    SyntaxError 语法错误，这个严格讲算是程序的错误
    IndexError 对于一个序列，访问的索引超过了序列的范围（序列的概念会在后续实验中讲到），
可以理解为我的序列里只有三个元素，但要访问第4个
    KeyError 访问一个不存在的字典 Key，字典也会在下一节实验中详细讲到，
Key 如果不存在字典就会抛出这个异常
    ValueError 传入无效的参数
    AttributeError 访问类对象中不存在的属性

异常处理方式
try
except
finally

代码格式：
try:
    有可能抛出异常的代码
except 异常类型名称：
    处理代码
except 异常类型名称：
    处理代码
	
这里需要注意的是 except 可以有多个，每个处理不同类型的异常，
也可以不写任何异常类型名称，则会处理所有捕获的异常。

有的时候如果我们需要获得异常的具体信息的话，也会写成
 except FileNotFoundError as err: 这种形式，err 为异常对象，
我们可以通过这个对象获取更详细的异常信息。

例如一段 代码
filename = input('enter file path:')
f = open(filename)
print(f.read())

改进后：
filename = input("Enter file path:")
try:
    f = open(filename)
    print(f.read())
    f.close()
except FileNotFoundError as err:
    print("Error: {0}".format(err))
	
当 try 代码块中一旦出现异常，这个代码块后续的代码不会继续执行，
会直接进入到 except 异常处理代码块中。
例如上面代码输入不存在的文件时，这个时候会被 except 捕获并处理。

finally 关键字是用来进行清理工作，经常和 except 一起使用，
即无论是正常还是异常，这段代码都会执行。

如果一个文件处理的程序中异常出现在 f.write() 向文件中写入数据的时候，
就无法执行 close 操作，使用 finally 可以保证无论 try 代码块中的代码是否抛出异常，
都能够执行 finally 代码块里的内容，保证文件被正常关闭。

修改上述的程序如下，改为写入操作，引入 finally 保证文件可以被正常关闭：
filename = '/etc/protocols'
f = open(filename)
try:
    f.write('shiyanlou')
except:
    print("File write error")
finally:
    print("finally")
    f.close()
	
程序运行的结果：

File write error
finally

表示虽然异常，但仍然执行到了 finally 代码块。
这里需要说明下抛出异常的原因是以只读的模式打开了一个文件，但尝试向文件中写入内容，
所以会抛出异常。另外 except: 这个语句后不写任何参数，表示将处理所有 try 代码块中抛出的异常。

抛出异常：


如果我们希望在程序执行过程中抛出一些异常，该如何操作呢？可以使用 raise 语句：

raise 异常名称

例如，我们在代码里希望抛出一个 ValueError，直接使用：

raise ValueError()

外部的代码就可以使用 except ValueError 进行捕获和处理了。
