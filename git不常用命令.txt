Git是什么？

Git是目前世界上最先进的分布式版本控制系统（没有之一）。

Git有什么特点？简单来说就是：高端大气上档次！

那什么是版本控制系统？

如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：

想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去


1、设置name和email 最好是GitHub的用户名和邮件

git config --global user.name "yourname"

git config --global user.email "youremail"

 

2、查看git配置

git config --list

 

3、创建git管理目录

$ mkdir learngit

进入当前目录

$ cd learngit

查看当前目录

$ pwd

/Users/michael/learngit

 

4、把这个目录变成Git可以管理的仓库

git init

 

5、查看.git目录

ls -ah

 

6、把文件添加到仓库

git add 文件名

 

7、把文件提交到仓库

git commit -m "本次提交内容备注"

 

8、查看仓库当前的状态

git status

 

9、查看和git版本库有什么不同，可以查看修改了什么内容，查看difference

git diff

 

10、查看提交日志

git log

如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

git log --pretty=oneline

 

11、用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

回退到上一个版本

git reset --hard HEAD^

回退到指定版本

git reset --hard commitId(具体版本的id)

 

12、记录你的每一次命令

git reflog

 

13、查看工作区和版本库里面最新版本的区别

git diff HEAD -- <file>

 

14、把文件在工作区的修改全部撤销

（命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。）

 

git checkout -- <file>

 

15、把暂存区的修改撤销掉（unstage），重新放回工作区

git reset HEAD <file>

 

16、确实要从版本库中删除该文件

git rm删掉，并且git commit

 

17、删错了，把误删的文件恢复到最新版本

git checkout -- <file>

 

远程仓库 依赖GitHub需要设置一些东西

 

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Git Bash，创建SSH Key：

ssh-keygen -t rsa -C "youremail@example.com"

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

 

18、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

 

19、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

 

20、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

 

21、克隆一个本地库

git clone git@github.com:michaelliao/gitskills.git

 

22、创建dev分支，然后切换到dev分支（git checkout命令加上-b参数表示创建并切换）

git checkout -b dev

23、创建并切换

$ git branch dev

$ git checkout dev

 

24、查看当前分支

$ git branch

 

25、我们就可以切换回master分支

git checkout master

 

26、把dev分支的工作成果合并到master分支上

git merge dev

27、放心地删除dev分支

git branch -d dev

小结

Git鼓励大量使用分支：

 

查看分支：git branch

 

创建分支：git branch <name>

 

切换分支：git checkout <name>

 

创建+切换分支：git checkout -b <name>

 

合并某分支到当前分支：git merge <name>

 

删除分支：git branch -d <name>

 

28、用带参数的git log也可以看到分支的合并情况

git log --graph --pretty=oneline --abbrev-commit

用git log --graph命令可以看到分支合并图。

 

29、准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward(合并要创建一个新的commit，所以加上-m参数，把commit描述写进去)

git merge --no-ff -m "merge with no-ff" dev

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

 

 

30、把当前工作现场“储藏”起来，等以后恢复现场后继续工作

$ git stash

 

31、用git stash list命令查看存储位置

git stash list

 

32、Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法

git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除

另一种方式是用git stash pop，恢复的同时把stash内容也删了

 

33、恢复指定的stash

git stash apply stash@{0}

 

34、如果要丢弃一个没有被合并过的分支

git branch -D <name>强行删除

 

35、查看远程仓库的信息

git remote

 

36、查看远程仓库更详细信息

git remote -v

 

37、把本地指定分支的数据推送到远程库

git push origin master

 

38、创建远程origin的dev分支到本地

git checkout -b dev origin/dev

 

39、多个人同时push代码到远程库有冲突时

git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

 

40、git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接，之后再重新git pull；

git branch --set-upstream-to=origin/dev dev

 

 

因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

 

小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

 

41、rebase操作可以把本地未push的分叉提交历史整理成直线；

rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

git rebase
--------------------- 
